<?xml version="1.0"?>
<launch>


  <arg name="limited" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="debug" default="false" />
  <arg name="sim" default="true" />
      <arg name="user_debug" default="false"/>
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />

  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>


<group ns="ur5">
  <!-- spwan ur5 -->
  <!-- send robot urdf to param server -->
  <!-- <include file="$(find ur_description)/launch/ur5_upload.launch">
    <arg name="limited" value="$(arg limited)"/>
  </include> -->
  <param  name="robot_description" command="$(find xacro)/xacro --inorder '$(find ur_description)/urdf/ur5_joint_limited_robot.urdf.xacro' transmission_hw_interface:=$(arg transmission_hw_interface) " />
  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model ur5  -z 0.2 -y 0.7 -x 0.0" respawn="false" output="screen" />

  <!-- <include file="$(find ur_gazebo)/launch/controller_utils.launch"/> -->

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <!-- <param name="tf_prefix" type="string" value="" /> -->
  </node>

  <!-- Fake Calibration -->
  <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />
  
  <!-- joint_state_controller -->
  <rosparam file="$(find ur_gazebo)/controller/joint_state_controller.yaml" command="load"/>
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>

  <rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>

  <!-- Remap follow_joint_trajectory -->
  <remap if="$(arg sim)" from="/follow_joint_trajectory" to="/arm_controller/follow_joint_trajectory"/>

  <node name="spawn_conveyor_belt" pkg="gazebo_ros" type="spawn_model" args="-file $(find ur5_notebook)/urdf/conveyor_belt.urdf -urdf -model conveyor_belt" />
  <node name="bin" pkg="gazebo_ros" type="spawn_model" args="-file $(find ur5_notebook)/urdf/bin.urdf -urdf -model bin -y 1.0 -x -0.5 -z 0.1" />
  <include file="$(find ur5_moveit_config)/launch/move_group.launch">
    <arg name="limited" default="$(arg limited)"/>
    <arg name="debug" default="$(arg debug)" />
  </include>
</group>

 <rosparam file="$(find aliengo_gazebo)/config/robot_control.yaml" command="load"/>
<group ns="laikago_gazebo">
    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(find aliengo_description)/xacro/robot.xacro'
           DEBUG:=$(arg user_debug)"/>
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen"
          args="-urdf -x -4.4 -y 3.5 -z 0.7  -model laikago_gazebo -param robot_description -unpause"/> <!--y: 4.081438 -->
    <!-- load the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="true"
          output="screen"    args="joint_state_controller
          FL_hip_controller FL_thigh_controller FL_calf_controller
          FR_hip_controller FR_thigh_controller FR_calf_controller
          RL_hip_controller RL_thigh_controller RL_calf_controller
          RR_hip_controller RR_thigh_controller RR_calf_controller "/>
    <!-- convert joint states to TF transforms for rviz, etc -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"
          respawn="false" output="screen">
        <!-- <remap from="/joint_states" to="/laikago_gazebo/joint_states"/> -->
    </node>
	<!--Champ-Garen Legged Controller with Foot Placement -->
  	<include file="$(find aliengo_config)/launch/foot_planner.launch" />
  	<include file="$(find aliengo_navigation)/launch/move_base.launch"/>
  	<node type="rviz" name="rviz" pkg="rviz" args="-d $(find aliengo_gazebo)/rviz/urdf_viewer.rviz" />
        <node pkg="aliengo_gazebo" name="sim_odometry_converter" type="sim_odometry_converter.py" output="screen"/>
   <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_robot_base"   args="0 0 0 0 0 0 base  laikago_gazebo/base" />
</group>


</launch>
