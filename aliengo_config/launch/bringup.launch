<?xml version="1.0"?>
<launch>
    <arg name="robot_name"       default="/"/>
    <arg name="joints_map_file"  default="$(find aliengo_config)/config/joints/joints.yaml"/>
    <arg name="links_map_file"   default="$(find aliengo_config)/config/links/links.yaml"/>
    <arg name="gait_config_file" default="$(find aliengo_config)/config/gait/gait.yaml"/>
    <arg name="description_file" default="$(find aliengo_description)/xacro/aliengo.urdf"/>
    <arg name="gazebo"           default="false" />
    <arg name="rviz"             default="false"/>
    <arg name="rviz_ref_frame"   default="odom"/>
    <arg name="laser"            default="sim"/>

    <group ns="$(arg robot_name)">
        <param name="tf_prefix" value="$(arg robot_name)"/>
        <param if="$(arg gazebo)" name="use_sim_time" value="true"/>
        
        <node pkg="aliengo_base" name="aliengo_controller" type="quadruped_controller_node" output="screen">
            <param name="gazebo" value="$(arg gazebo)" />
        </node>

        <rosparam command="load" ns="gait"       file="$(arg gait_config_file)" />
        <rosparam command="load" ns="links_map"  file="$(arg links_map_file)" />
        <rosparam command="load" ns="joints_map" file="$(arg joints_map_file)" />

        <include file="$(find aliengo_config)/launch/velocity_smoother.launch" />
            
        <!--node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"> 
            <remap from="odometry/filtered" to="odometry/filtered" />
            <rosparam command="load" file="$(find aliengo_config)/config/ekf/ekf.yaml" />
        </node-->
        <node pkg="aliengo_gazebo" name="sim_odometry_converter" type="sim_odometry_converter.py" output="screen">

    <arg if="$(eval arg('robot_name') == '/')"  name="frame_prefix" value="" />
    <arg unless="$(eval arg('robot_name') == '/')" name="frame_prefix" value="$(arg robot_name)/" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0 0 0 0 $(arg frame_prefix)base $(arg frame_prefix)laser" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_imu"   args="0 0 0 0 0 0 $(arg frame_prefix)base $(arg frame_prefix)imu_link" />

</launch>
